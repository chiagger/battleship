/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/gameboard.js":
/*!**************************!*\
  !*** ./src/gameboard.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ship = __webpack_require__(/*! ./ship.js */ \"./src/ship.js\");\n\nclass Cell {\n    constructor() {\n        this.placed = false;\n        this.hit = false;\n        this.attacked = false;\n        this.ship = undefined;\n    }\n    getShip() {\n        return this.ship;\n    }\n    setShip(ship) {\n        this.ship = ship;\n    }\n    getAttacked() {\n        return this.attacked;\n    }\n    setAttacked(value) {\n        this.attacked = value;\n    }\n    getPlaced() {\n        return this.placed;\n    }\n    getHit() {\n        return this.hit;\n    }\n    setPlaced(value) {\n        this.placed = value;\n    }\n    setHit(value) {\n        this.hit = value;\n    }\n}\n\n\n\nclass Gameboard {\n    constructor() {\n        this.board = [100];\n        for (let i = 0; i < 100; i++) {\n            this.board[i] = new Cell();\n        }\n        this.shipArray = [];\n        this.shipArray4 = Array.apply(null, Array(1)).map(function () { });\n        this.shipArray3 = Array.apply(null, Array(2)).map(function () { });\n        this.shipArray2 = Array.apply(null, Array(3)).map(function () { });\n        this.shipArray1 = Array.apply(null, Array(4)).map(function () { });\n    }\n\n    getShipArray() {\n        return this.shipArray;\n    }\n    getShipArray1() {\n        return this.shipArray1;\n    }\n    getShipArray2() {\n        return this.shipArray2;\n    }\n    getShipArray3() {\n        return this.shipArray3;\n    }\n    getShipArray4() {\n        return this.shipArray4;\n    }\n    setShipArray(ship) {\n        this.shipArray.push(ship);\n    }\n    setShipArray1(ship, i) {\n        this.shipArray1[i] = ship;\n    }\n    setShipArray2(ship, i) {\n        this.shipArray2[i] = ship;\n    }\n    setShipArray3(ship, i) {\n        this.shipArray3[i] = ship;\n    }\n    setShipArray4(ship, i) {\n        this.shipArray4[i] = ship;\n    }\n    getBoard() {\n        return this.board;\n    }\n\n    placeShip(xcc, ycc, axis, length, gameboard) {\n        let newShip = ship.createShip(length, gameboard);\n        let position;\n        if (axis === \"x\") {\n            if ((10 - ycc) < length) {\n                throw new Error(\"Ship can't be placed here\");\n            } else {\n                let canPlace = true;\n                for (let k = 0; k < length; k++) {\n                    position = parseInt((xcc).toString() + (ycc + k).toString());\n                    if (xcc === 0) {\n                        position = parseInt((ycc + k).toString());\n                    }\n                    if (this.board[position].getPlaced() === true) {\n                        canPlace = false;\n                    }\n                }\n                if (canPlace === true) {\n                    for (let i = 0; i < length; i++) {\n                        position = parseInt((xcc).toString() + (ycc + i).toString());\n                        if (this.board[position].getPlaced() === false) {\n                            this.board[position].setPlaced(true);\n                            newShip.setCc(position);\n                            this.board[position].setShip(newShip);\n                        }\n                    }\n                }\n            }\n        } else if (axis === \"y\") {\n            if ((10 - xcc) < length) {\n                throw new Error(\"Ship can't be placed here\");\n            }\n            else {\n                let canPlace = true;\n                for (let k = 0; k < length; k++) {\n                    position = parseInt((xcc + k).toString() + (ycc).toString());\n                    if (xcc === 0 && k === 0) {\n                        position = parseInt((ycc).toString());\n                    }\n                    if (this.board[position].getPlaced() === true) {\n                        canPlace = false;\n                    }\n                }\n                if (canPlace === true) {\n                    for (let i = 0; i < length; i++) {\n                        position = parseInt((xcc + i).toString() + (ycc).toString());\n                        if (this.board[position].getPlaced() === false) {\n                            this.board[position].setPlaced(true);\n                            newShip.setCc(position);\n                            this.board[position].setShip(newShip);\n                        }\n                    }\n                }\n            }\n        } else {\n            throw new Error(\"Error in axis assignment\");\n        }\n    }\n\n    receiveAttack(xcc, ycc) {\n        let position = parseInt((xcc).toString() + (ycc).toString());\n        if (this.board[position].getAttacked() === true) {\n            throw new Error(\"Already attacked\");\n        }\n        this.board[position].setAttacked(true);\n        if (this.board[position].getPlaced() === true) {\n            this.board[position].setHit(true);\n            this.board[position].getShip().increaseHit();\n\n        }\n    }\n}\n\nmodule.exports = { Gameboard, Cell };\n\n//# sourceURL=webpack://battleship/./src/gameboard.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ship = __webpack_require__(/*! ./ship */ \"./src/ship.js\");\nconst gameboard = __webpack_require__(/*! ./gameboard.js */ \"./src/gameboard.js\");\nconst player = __webpack_require__(/*! ./player */ \"./src/player.js\");\n\nlet enemySunk = 0;\nlet meSunk = 0;\nlet meGb = new gameboard.Gameboard();\nlet enemyGb = new gameboard.Gameboard();\nlet mePlayer = new player.Player(0, meGb);\nlet enemyPlayer = new player.Player(1, enemyGb);\n\nfunction getAxisName(value) {\n    if (value === 0) {\n        return \"x\";\n    } else if (value === 1) {\n        return \"y\"\n    } else {\n        throw new Error(\"Error in axis calc\");\n    }\n}\n\nfunction getNrOfShip(length) {\n    if (length === 4) {\n        return 1;\n    } else if (length === 3) {\n        return 2;\n    } else if (length === 2) {\n        return 3;\n    } else if (length === 1) {\n        return 4;\n    }\n}\n\nfunction calcPlace(length) {\n    let position;\n    let nr = getNrOfShip(length);\n    for (let i = 0; i < nr; i++) {\n        let axis = Math.round(Math.random());\n        let xcc = Math.floor(Math.random() * 9) + 1;\n        let ycc = Math.floor(Math.random() * 9) + 1;\n        if (axis === 0) {\n            let placed = false;\n            for (let k = 0; k < length; k++) {\n                if (ycc + length <= 9) {\n                    position = parseInt((xcc).toString() + (ycc + k).toString());\n                    if (xcc === 0) {\n                        position = parseInt((ycc + k).toString());\n                    }\n                    if (enemyGb.getBoard()[position].getPlaced() === true) {\n                        placed = true;\n                    }\n                }\n            }\n            while (placed === true || ycc > 6) {\n                placed = false;\n                xcc = Math.floor(Math.random() * 9) + 1;\n                ycc = Math.floor(Math.random() * 9) + 1;\n                for (let k = 0; k < length; k++) {\n                    if (ycc + length <= 9) {\n                        position = parseInt((xcc).toString() + (ycc + k).toString());\n                        if (xcc === 0) {\n                            position = parseInt((ycc + k).toString());\n                        }\n                        if (enemyGb.getBoard()[position].getPlaced() === true) {\n                            placed = true;\n                        }\n                    }\n                }\n            }\n        } else {\n            let placed = false;\n            for (let k = 0; k < length; k++) {\n                if (xcc + length <= 9) {\n                    position = parseInt((xcc + k).toString() + (ycc).toString());\n                    if (xcc === 0 && k === 0) {\n                        position = parseInt((ycc).toString());\n                    }\n                    if (enemyGb.getBoard()[position].getPlaced() === true) {\n                        placed = true;\n                    }\n                }\n            }\n            while (placed === true || xcc > 6) {\n                placed = false;\n                xcc = Math.floor(Math.random() * 9) + 1;\n                ycc = Math.floor(Math.random() * 9) + 1;\n                for (let k = 0; k < length; k++) {\n                    if (xcc + length <= 9) {\n                        position = parseInt((xcc + k).toString() + (ycc).toString());\n                        if (xcc === 0 && k === 0) {\n                            position = parseInt((ycc).toString());\n                        }\n                        if (enemyGb.getBoard()[position].getPlaced() === true) {\n                            placed = true;\n                        }\n                    }\n                }\n            }\n        }\n        enemyGb.placeShip(xcc, ycc, getAxisName(axis), length, enemyGb);\n    }\n\n}\n\nfunction placeEnemyShips() {\n    calcPlace(4);\n    calcPlace(3);\n    calcPlace(2);\n    calcPlace(1);\n}\n\nfunction mouseoverfoury(e) {\n    e.target.classList.add(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.classList.add(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.classList.add(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.classList.add(\"hovered\");\n}\nfunction mouseoutfoury(e) {\n    e.target.classList.remove(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.classList.remove(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.classList.remove(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.classList.remove(\"hovered\");\n}\n\nfunction mouseoverfourx(e) {\n    e.target.classList.add(\"hovered\");\n    e.target.nextElementSibling.classList.add(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.classList.add(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.classList.add(\"hovered\");\n}\nfunction mouseoutfourx(e) {\n    e.target.classList.remove(\"hovered\");\n    e.target.nextElementSibling.classList.remove(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.classList.remove(\"hovered\");\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.classList.remove(\"hovered\");\n}\n\n\nfunction placefourship(axis) {\n    const cells = document.querySelectorAll(\"#meGrid .cell\");\n    var clickfoury = function (i) {\n        return function curried_func(e) {\n            let xcc;\n            let ycc;\n            if (i.toString().length === 1) {\n                xcc = 0;\n                ycc = parseInt(i.toString()[0]);\n            } else {\n                xcc = parseInt(i.toString()[0]);\n                ycc = parseInt(i.toString()[1]);\n            }\n            meGb.placeShip(xcc, ycc, \"y\", 4, meGb);\n            for (let i = 0; i < meGb.getBoard().length; i++) {\n                if (meGb.getBoard()[i].getPlaced() === true) {\n                    cells[i].style.backgroundColor = \"gray\";\n                }\n                cells[i].removeEventListener(\"mouseover\", mouseoverfoury);\n                cells[i].removeEventListener(\"mouseout\", mouseoutfoury);\n\n            }\n\n        }\n    }\n    var clickfourx = function (i) {\n        return function curried_func(e) {\n            let xcc;\n            let ycc;\n            if (i.toString().length === 1) {\n                xcc = 0;\n                ycc = parseInt(i.toString()[0]);\n            } else {\n                xcc = parseInt(i.toString()[0]);\n                ycc = parseInt(i.toString()[1]);\n            }\n            meGb.placeShip(xcc, ycc, \"x\", 4, meGb);\n            for (let i = 0; i < meGb.getBoard().length; i++) {\n                if (meGb.getBoard()[i].getPlaced() === true) {\n                    cells[i].style.backgroundColor = \"gray\";\n                }\n                cells[i].removeEventListener(\"mouseover\", mouseoverfourx);\n                cells[i].removeEventListener(\"mouseout\", mouseoutfourx);\n            }\n\n        }\n    }\n\n    //place 4 ship\n    for (let i = 0; i < cells.length; i++) {\n        if (axis === 0) {\n            cells[i].removeEventListener(\"click\", clickfoury(i));\n            cells[i].removeEventListener(\"mouseover\", mouseoverfoury);\n            cells[i].removeEventListener(\"mouseout\", mouseoutfoury);\n            cells[i].addEventListener(\"mouseover\", mouseoverfourx);\n            cells[i].addEventListener(\"mouseout\", mouseoutfourx)\n            cells[i].addEventListener(\"click\", clickfourx(i), { once: true });\n\n        } else {\n            cells[i].removeEventListener(\"click\", clickfourx(i));\n            cells[i].removeEventListener(\"mouseover\", mouseoverfourx);\n            cells[i].removeEventListener(\"mouseout\", mouseoutfourx);\n            cells[i].addEventListener(\"mouseover\", mouseoverfoury);\n            cells[i].addEventListener(\"mouseout\", mouseoutfoury);\n            cells[i].addEventListener(\"click\", clickfoury(i), { once: true })\n\n        }\n    }\n\n}\n\nfunction placeYourShips() {\n    let axis = 1;\n    const urships = document.querySelector(\".urships\");\n    const axisbtn = document.createElement(\"button\");\n    axisbtn.textContent = \"Axis: x\";\n    urships.appendChild(axisbtn);\n    /*axisbtn.addEventListener(\"click\", () => {\n        if (axisbtn.textContent === \"Axis: x\") {\n            axisbtn.textContent = \"Axis: y\";\n            axis = 1;\n        } else {\n            axisbtn.textContent === \"Axis: x\"\n            axis = 0;\n        }\n        placefourship(axis);\n    })*/\n    placefourship(axis);\n\n}\n\nfunction populateGrids() {\n    try {\n        const meGrid = document.getElementById('meGrid');\n        const enemyGrid = document.getElementById('enemyGrid');\n\n        for (let i = 0; i < meGb.getBoard().length; i++) {\n            const DOMCell = document.createElement(\"div\");\n            DOMCell.classList.add(\"cell\");\n            DOMCell.addEventListener(\"click\", () => {\n                let position = i.toString();\n                if (position.length === 1) {\n                    position = \"0\" + position;\n                }\n                let xcc = position[0];\n                let ycc = position[1];\n                enemyPlayer.attack(xcc, ycc, mePlayer.getGameboard());\n                if (meGb.getBoard()[i].getAttacked() === true) {\n                    DOMCell.style.backgroundColor = \"aquamarine\";\n                }\n                if (meGb.getBoard()[i].getHit() === true) {\n                    DOMCell.style.backgroundColor = \"orange\";\n                }\n                try {\n                    if (meGb.getBoard()[i].getShip().isSunk() === true) {\n                        for (let k = 0; k < meGb.getBoard().length; k++) {\n                            if (meGb.getBoard()[k].getShip() === meGb.getBoard()[i].getShip()) {\n                                //only does 1\n                                const cellArray = document.querySelectorAll(\"#meGrid .cell\");\n                                cellArray[k].style.backgroundColor = \"red\";\n                            }\n                        }\n                        meSunk += 1;\n                        if (meSunk === 10) {\n                            alert(\"You LOSE!!\");\n                        }\n                    }\n\n                } catch (e) { }\n\n            })\n\n            meGrid.appendChild(DOMCell);\n\n        }\n        placeYourShips();\n        placeEnemyShips();\n        for (let i = 0; i < enemyGb.getBoard().length; i++) {\n            const DOMCell = document.createElement(\"div\");\n            DOMCell.classList.add(\"cell\");\n            // if (enemyGb.getBoard()[i].getPlaced() === true) {\n            //    DOMCell.style.backgroundColor = \"gray\";\n            //}\n            DOMCell.addEventListener(\"click\", () => {\n                let position = i.toString();\n                if (position.length === 1) {\n                    position = \"0\" + position;\n                }\n                let xcc = position[0];\n                let ycc = position[1];\n                mePlayer.attack(xcc, ycc, enemyPlayer.getGameboard());\n                if (enemyGb.getBoard()[i].getAttacked() === true) {\n                    DOMCell.style.backgroundColor = \"aquamarine\";\n                }\n                if (enemyGb.getBoard()[i].getHit() === true) {\n                    DOMCell.style.backgroundColor = \"orange\";\n                }\n                try {\n                    if (enemyGb.getBoard()[i].getShip().isSunk() === true) {\n                        for (let k = 0; k < enemyGb.getBoard().length; k++) {\n                            if (enemyGb.getBoard()[k].getShip() === enemyGb.getBoard()[i].getShip()) {\n                                const cellArray = document.querySelectorAll(\"#enemyGrid .cell\");\n                                cellArray[k].style.backgroundColor = \"red\";\n\n                            }\n                        }\n                        enemySunk += 1;\n                        if (enemySunk === 10) {\n                            alert(\"You WIN!!\");\n                        }\n                    }\n                } catch (e) { }\n\n            })\n            enemyGrid.appendChild(DOMCell);\n        }\n    } catch (e) {\n        alert(e.message);\n    }\n}\n\n\npopulateGrids();\n\n\n\n\n\nmodule.exports = { meGb, enemyGb, mePlayer, enemyPlayer }\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const gameboardMod = __webpack_require__(/*! ./gameboard */ \"./src/gameboard.js\");\n\nclass Player {\n    constructor(id, gameboard) {\n        this.id = id;\n        this.gameboard = gameboard;\n    }\n    getId() {\n        return this.id;\n    }\n    getGameboard() {\n        return this.gameboard;\n    }\n    attack(xcc, ycc, enemyGb) {\n        enemyGb.receiveAttack(xcc, ycc);\n    }\n}\n\nmodule.exports = { Player }\n\n//# sourceURL=webpack://battleship/./src/player.js?");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((module) => {

eval("\n\nclass Ship {\n    constructor(length, gameboard) {\n        this.length = length;\n        this.timesHit = 0;\n        this.sunk = false;\n        this.cc = [];\n        this.gameboard = gameboard;\n    }\n    getGameboard() {\n        return this.gameboard;\n    }\n    getCc() {\n        return this.cc;\n    }\n    setCc(value) {\n        this.cc.push(value);\n    }\n    getLength() {\n        return this.length;\n    }\n    getTimesHit() {\n        return this.timesHit;\n    }\n    getSunk() {\n        return this.sunk;\n    }\n    setSunk(value) {\n        this.sunk = value;\n    }\n    increaseHit() {\n        this.timesHit += 1;\n    }\n    isSunk() {\n        let result = false;\n        if (this.length === this.timesHit) {\n            this.sunk = true;\n            result = true;\n        }\n        return result;\n    }\n}\n\n//handles the logic for only having a certain amount of x length ships\nfunction createShip(length, gameboard) {\n    let newShip = new Ship(length, gameboard);\n    if (newShip.getGameboard() === undefined) {\n        throw new Error(\"undefined gb\");\n    }\n    \n    let flag = false;\n    if (length === 4) {\n        for (let i = 0; i < newShip.getGameboard().getShipArray4().length; i++) {\n            if (newShip.getGameboard().getShipArray4()[i] === undefined) {\n                flag = true;\n                newShip.getGameboard().setShipArray(newShip);\n                newShip.getGameboard().setShipArray4(newShip, i);\n                break;\n            }\n        }\n    }\n    if (length === 3) {\n        for (let i = 0; i < newShip.getGameboard().getShipArray3().length; i++) {\n            if (newShip.getGameboard().getShipArray3()[i] === undefined) {\n                flag = true;\n                newShip.getGameboard().setShipArray(newShip);\n                newShip.getGameboard().setShipArray3(newShip, i);\n                break;\n            }\n        }\n    }\n    if (length === 2) {\n        for (let i = 0; i < newShip.getGameboard().getShipArray2().length; i++) {\n            if (newShip.getGameboard().getShipArray2()[i] === undefined) {\n                flag = true;\n                newShip.getGameboard().setShipArray(newShip);\n                newShip.getGameboard().setShipArray2(newShip, i);\n                break;\n            }\n        }\n    }\n    if (length === 1) {\n        for (let i = 0; i < newShip.getGameboard().getShipArray1().length; i++) {\n            if (newShip.getGameboard().getShipArray1()[i] === undefined) {\n                flag = true;\n                newShip.getGameboard().setShipArray(newShip);\n                newShip.getGameboard().setShipArray1(newShip, i);\n                break;\n            }\n        }\n    }\n    if (flag === true) {\n        return newShip;\n    } else {\n        throw new Error(\"Too many ships\");\n    }\n}\n\n\n\nmodule.exports = { createShip, Ship }\n\n//# sourceURL=webpack://battleship/./src/ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;